#include "Timer.h"
#include "BrightnessSensor.h"

#define B 40

module BrightnessSensorC {
	uses interface Timer<TMilli> as Timer;
	uses interface Leds;
	uses interface Boot;
	uses interface Read<uint16_t>;
	
	uses interface SplitControl as Control;
	uses interface AMSend;
	uses interface Packet;
	uses interface AMPacket;
}

implementation {
	uint16_t brightness;
	bool ledIsOn = FALSE;
	message_t packet;
	bool busy = FALSE;
	
	task void CheckBrightness() {
		
		if(brightness < B) {
			if(!ledIsOn){
				call Leds.led2On();
				ledIsOn = TRUE;
			}
 		}
		else {
			if(ledIsOn) {
				call Leds.led2Off();
				ledIsOn = FALSE;
			}
		}
	}
	
	event void Boot.booted() {
		call Control.start();
		
	}
	
	task void SendMessage() {
		if(!busy){
			Bright_Msg *send_message; 
			send_message = (Bright_Msg*) (call Packet.getPayload(&packet, sizeof(Bright_Msg)));
			
			if(send_message == NULL){
				return;
			}
			
			send_message->brightness = brightness;
			send_message->nodeId = TOS_NODE_ID;
			
			if( call AMSend.send(AM_BROADCAST_ADDR, &packet, sizeof(Bright_Msg)) == SUCCESS){
				busy = TRUE;
			}
		}
	}
	
	
/*********************************************************************/
	event void Control.startDone(error_t error){
		if(error != SUCCESS){
			call Control.start();
		}
		else {
			call Timer.startPeriodic( 1000 );
		}
	}
	
	event void Control.stopDone(error_t error) {}
/*********************************************************************/



	event void Timer.fired() {
		dbg("BrightnessSensor", "Check %s \n", sim_time_string());
		call Read.read();
	}
	
	
	event void Read.readDone(error_t result, uint16_t data) {
		dbg("Brightness", "Check %d \n", data);
		if(result == SUCCESS) {
			brightness = data;
			post CheckBrightness();
			
		}
		else {
			return;
		}
		
		
	}
	
	event void AMSend.sendDone(message_t* msg, error_t error){
		if(&packet == msg) {
			busy = FALSE;
		}
	}
	
}