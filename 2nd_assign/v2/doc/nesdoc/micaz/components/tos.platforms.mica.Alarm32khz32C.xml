<?xml version="1.0" ?><component abstract="" loc="26:/opt/tinyos-2.1.2/tos/platforms/mica/Alarm32khz32C.nc" nicename="tos.platforms.mica.Alarm32khz32C" qname="Alarm32khz32C">
      <documentation loc="11:/opt/tinyos-2.1.2/tos/platforms/mica/Alarm32khz32C.nc">
        <short>
 32-bit 32kHz Alarm component as per TEP102 HAL guidelines.</short>
        <long>
 32-bit 32kHz Alarm component as per TEP102 HAL guidelines. The mica
 family 32kHz Alarm is built on hardware timer 1, and actually runs at
 CPU frequency / 256. You can use the MeasureClockC.cyclesPerJiffy()
 command to figure out the exact frequency.
 &lt;p&gt;
 Upto three of these alarms can be created (one per hardware compare
 register). Note that creating one of these Alarms consumes a 16-bit
 32kHz Alarm (see Alarm32khz16C).

 @author David Gay &lt;dgay@intel-research.net&gt;
</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
      <wiring>
        <wire loc="36:/opt/tinyos-2.1.2/tos/platforms/mica/Alarm32khz32C.nc">
          <from><interface-ref name="Alarm" ref="0x40792710" scoped=""/></from>
          <to><interface-ref name="Alarm" ref="0x40827578" scoped=""/></to>
        </wire>
        <wire loc="37:/opt/tinyos-2.1.2/tos/platforms/mica/Alarm32khz32C.nc">
          <from><interface-ref name="AlarmFrom" ref="0x4087e380" scoped=""/></from>
          <to><interface-ref name="Alarm" ref="0x4078b3c0" scoped=""/></to>
        </wire>
        <wire loc="38:/opt/tinyos-2.1.2/tos/platforms/mica/Alarm32khz32C.nc">
          <from><interface-ref name="Counter" ref="0x4087f0a0" scoped=""/></from>
          <to><interface-ref name="Counter" ref="0x40829928" scoped=""/></to>
        </wire>
      </wiring>
    <specification><interface loc="28:/opt/tinyos-2.1.2/tos/platforms/mica/Alarm32khz32C.nc" name="Alarm" provided="1" ref="0x40792710">
      <component-ref nicename="tos.platforms.mica.Alarm32khz32C" qname="Alarm32khz32C"/>
      <type-interface alignment="I:1" size="I:2"><interface-ref name="Alarm" ref="0x40792710" scoped=""/></type-interface>
      <instance>
        <interfacedef-ref nicename="tos.lib.timer.Alarm" qname="Alarm"/>
        <arguments>
          <type-tag alignment="I:1" size="I:2"><struct-ref ref="0x403a4d40"/>
            <typename><typedef-ref name="T32khz" ref="0x403a4f08"/></typename>
          </type-tag>
          <type-int alignment="I:1" cname="unsigned long" size="I:4" unsigned="">
            <typename><typedef-ref name="uint32_t" ref="0x40213848"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" ref="0x4078ebd8" scoped=""/>
        <function-ref name="fired" ref="0x4078e3a8" scoped=""/>
        <function-ref name="startAt" ref="0x4078e898" scoped=""/>
        <function-ref name="isRunning" ref="0x4078e620" scoped=""/>
        <function-ref name="getAlarm" ref="0x4078ee50" scoped=""/>
        <function-ref name="start" ref="0x40792e60" scoped=""/>
        <function-ref name="stop" ref="0x4078e130" scoped=""/>
      </interface-functions>
    </interface></specification><referenced><interface loc="68:/opt/tinyos-2.1.2/tos/lib/timer/TransformAlarmC.nc" name="Counter" provided="0" ref="0x4087f0a0">
      <component-ref nicename="tos.lib.timer.TransformAlarmC" qname="Alarm32khz32C.Transform32"/>
      <type-interface alignment="I:1" size="I:2"><interface-ref name="Counter" ref="0x4087f0a0" scoped=""/></type-interface>
      <instance>
        <interfacedef-ref nicename="tos.lib.timer.Counter" qname="Counter"/>
        <arguments>
          <type-tag alignment="I:1" size="I:2"><struct-ref ref="0x403a4d40"/>
            <typename><typedef-ref name="T32khz" ref="0x403a4f08"/></typename>
          </type-tag>
          <type-int alignment="I:1" cname="unsigned long" size="I:4" unsigned="">
            <typename><typedef-ref name="uint32_t" ref="0x40213848"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" ref="0x4087f7f0" scoped=""/>
        <function-ref name="clearOverflow" ref="0x4087fce0" scoped=""/>
        <function-ref name="isOverflowPending" ref="0x4087fa68" scoped=""/>
        <function-ref name="overflow" ref="0x4087e010" scoped=""/>
      </interface-functions>
    </interface><interface loc="61:/opt/tinyos-2.1.2/tos/lib/timer/TransformAlarmC.nc" name="Alarm" provided="1" ref="0x40827578">
      <component-ref nicename="tos.lib.timer.TransformAlarmC" qname="Alarm32khz32C.Transform32"/>
      <type-interface alignment="I:1" size="I:2"><interface-ref name="Alarm" ref="0x40827578" scoped=""/></type-interface>
      <instance>
        <interfacedef-ref nicename="tos.lib.timer.Alarm" qname="Alarm"/>
        <arguments>
          <type-tag alignment="I:1" size="I:2"><struct-ref ref="0x403a4d40"/>
            <typename><typedef-ref name="T32khz" ref="0x403a4f08"/></typename>
          </type-tag>
          <type-int alignment="I:1" cname="unsigned long" size="I:4" unsigned="">
            <typename><typedef-ref name="uint32_t" ref="0x40213848"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" ref="0x40864ab8" scoped=""/>
        <function-ref name="fired" ref="0x40864288" scoped=""/>
        <function-ref name="startAt" ref="0x40864778" scoped=""/>
        <function-ref name="isRunning" ref="0x40864500" scoped=""/>
        <function-ref name="getAlarm" ref="0x40864d30" scoped=""/>
        <function-ref name="start" ref="0x40827cc8" scoped=""/>
        <function-ref name="stop" ref="0x40864010" scoped=""/>
      </interface-functions>
    </interface><interface loc="30:/opt/tinyos-2.1.2/tos/platforms/mica/AlarmOne16C.nc" name="Alarm" provided="1" ref="0x4078b3c0">
      <component-ref nicename="tos.platforms.mica.AlarmOne16C" qname="Alarm32khz32C.Alarm16"/>
      <type-interface alignment="I:1" size="I:2"><interface-ref name="Alarm" ref="0x4078b3c0" scoped=""/></type-interface>
      <instance>
        <interfacedef-ref nicename="tos.lib.timer.Alarm" qname="Alarm"/>
        <arguments>
          <type-tag alignment="I:1" size="I:2"><struct-ref ref="0x403a4d40"/>
            <typename><typedef-ref name="TOne" ref="0x403cb9a0"/></typename>
          </type-tag>
          <type-int alignment="I:1" cname="unsigned short" size="I:2" unsigned="">
            <typename><typedef-ref name="uint16_t" ref="0x402131e8"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" ref="0x4082a878" scoped=""/>
        <function-ref name="fired" ref="0x4082a048" scoped=""/>
        <function-ref name="startAt" ref="0x4082a538" scoped=""/>
        <function-ref name="isRunning" ref="0x4082a2c0" scoped=""/>
        <function-ref name="getAlarm" ref="0x4082aaf0" scoped=""/>
        <function-ref name="start" ref="0x4078bb10" scoped=""/>
        <function-ref name="stop" ref="0x4078bdb0" scoped=""/>
      </interface-functions>
    </interface><interface loc="24:/opt/tinyos-2.1.2/tos/platforms/mica/Counter32khz32C.nc" name="Counter" provided="1" ref="0x40829928">
      <component-ref nicename="tos.platforms.mica.Counter32khz32C" qname="Counter32khz32C"/>
      <type-interface alignment="I:1" size="I:2"><interface-ref name="Counter" ref="0x40829928" scoped=""/></type-interface>
      <instance>
        <interfacedef-ref nicename="tos.lib.timer.Counter" qname="Counter"/>
        <arguments>
          <type-tag alignment="I:1" size="I:2"><struct-ref ref="0x403a4d40"/>
            <typename><typedef-ref name="T32khz" ref="0x403a4f08"/></typename>
          </type-tag>
          <type-int alignment="I:1" cname="unsigned long" size="I:4" unsigned="">
            <typename><typedef-ref name="uint32_t" ref="0x40213848"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" ref="0x4083f088" scoped=""/>
        <function-ref name="clearOverflow" ref="0x4083f578" scoped=""/>
        <function-ref name="isOverflowPending" ref="0x4083f300" scoped=""/>
        <function-ref name="overflow" ref="0x4083f7f0" scoped=""/>
      </interface-functions>
    </interface><interface loc="73:/opt/tinyos-2.1.2/tos/lib/timer/TransformAlarmC.nc" name="AlarmFrom" provided="0" ref="0x4087e380">
      <component-ref nicename="tos.lib.timer.TransformAlarmC" qname="Alarm32khz32C.Transform32"/>
      <type-interface alignment="I:1" size="I:2"><interface-ref name="AlarmFrom" ref="0x4087e380" scoped=""/></type-interface>
      <instance>
        <interfacedef-ref nicename="tos.lib.timer.Alarm" qname="Alarm"/>
        <arguments>
          <type-tag alignment="I:1" size="I:2"><struct-ref ref="0x403a4d40"/>
            <typename><typedef-ref name="TOne" ref="0x403cb9a0"/></typename>
          </type-tag>
          <type-int alignment="I:1" cname="unsigned short" size="I:2" unsigned="">
            <typename><typedef-ref name="uint16_t" ref="0x402131e8"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" ref="0x4087c840" scoped=""/>
        <function-ref name="fired" ref="0x4087c010" scoped=""/>
        <function-ref name="startAt" ref="0x4087c500" scoped=""/>
        <function-ref name="isRunning" ref="0x4087c288" scoped=""/>
        <function-ref name="getAlarm" ref="0x4087cab8" scoped=""/>
        <function-ref name="start" ref="0x4087ead0" scoped=""/>
        <function-ref name="stop" ref="0x4087ed70" scoped=""/>
      </interface-functions>
    </interface><component abstract="" loc="28(Alarm32khz32C.Alarm16):/opt/tinyos-2.1.2/tos/platforms/mica/AlarmOne16C.nc" nicename="tos.platforms.mica.AlarmOne16C" qname="Alarm32khz32C.Alarm16">
      <documentation loc="11:/opt/tinyos-2.1.2/tos/platforms/mica/AlarmOne16C.nc">
        <short>
 16-bit 32kHz Alarm component as per TEP102 HAL guidelines.</short>
        <long>
 16-bit 32kHz Alarm component as per TEP102 HAL guidelines. The mica
 family 32kHz Alarm is built on hardware timer 1, and actually runs at
 CPU frequency / 256. You can use the MeasureClockC.cyclesPerJiffy()
 command to figure out the exact frequency.
 &lt;p&gt;
 Assumes an ~8MHz CPU clock, replace this component if you are running at
 a radically different frequency.
 &lt;p&gt;
 Upto three of these alarms can be created (one per hardware compare
 register).

 @author David Gay &lt;dgay@intel-research.net&gt;
</long>
      </documentation>
      <instance>
        <component-ref nicename="tos.platforms.mica.AlarmOne16C" qname="AlarmOne16C"/>
      </instance>
      <configuration/>
    </component><component abstract="" loc="51(Alarm32khz32C.Transform32):/opt/tinyos-2.1.2/tos/lib/timer/TransformAlarmC.nc" nicename="tos.lib.timer.TransformAlarmC" qname="Alarm32khz32C.Transform32">
      <documentation loc="34:/opt/tinyos-2.1.2/tos/lib/timer/TransformAlarmC.nc">
        <short>
 TransformAlarmC decreases precision and/or widens an Alarm.</short>
        <long>
 TransformAlarmC decreases precision and/or widens an Alarm.  An already
 widened Counter component is used to help.

 &lt;p&gt;See TEP102 for more details.
 @param to_precision_tag A type indicating the precision of the transformed
   Alarm.
 @param to_size_type The type for the width of the transformed Alarm.
 @param from_precision_tag A type indicating the precision of the original
   Alarm.
 @param from_size_type The type for the width of the original Alarm.
 @param bit_shift_right Original time units will be 2 to the power 
   &lt;code&gt;bit_shift_right&lt;/code&gt; larger than transformed time units.

 @author Cory Sharp &lt;cssharp@eecs.berkeley.edu&gt;
</long>
      </documentation>
      <instance>
        <component-ref nicename="tos.lib.timer.TransformAlarmC" qname="TransformAlarmC"/>
        <arguments>
          <type-tag alignment="I:1" size="I:2"><struct-ref ref="0x403a4d40"/>
            <typename><typedef-ref name="T32khz" ref="0x403a4f08"/></typename>
          </type-tag>
          <type-int alignment="I:1" cname="unsigned long" size="I:4" unsigned="">
            <typename><typedef-ref name="uint32_t" ref="0x40213848"/></typename>
          </type-int>
          <type-tag alignment="I:1" size="I:2"><struct-ref ref="0x403a4d40"/>
            <typename><typedef-ref name="TOne" ref="0x403cb9a0"/></typename>
          </type-tag>
          <type-int alignment="I:1" cname="unsigned short" size="I:2" unsigned="">
            <typename><typedef-ref name="uint16_t" ref="0x402131e8"/></typename>
          </type-int>
          <value cst="I:0">
            <type-int alignment="I:1" cname="int" size="I:2"/>
          </value>
        </arguments>
      </instance>
      <module/>
    </component><component loc="22:/opt/tinyos-2.1.2/tos/platforms/mica/Counter32khz32C.nc" nicename="tos.platforms.mica.Counter32khz32C" qname="Counter32khz32C">
      <documentation loc="11:/opt/tinyos-2.1.2/tos/platforms/mica/Counter32khz32C.nc">
        <short>
 32-bit 32kHz Counter component as per TEP102 HAL guidelines.</short>
        <long>
 32-bit 32kHz Counter component as per TEP102 HAL guidelines. The mica
 family 32kHz clock is built on hardware timer 1, and actually runs at
 CPU frequency / 256. You can use the MeasureClockC.cyclesPerJiffy()
 command to figure out the exact frequency.

 @author David Gay &lt;dgay@intel-research.net&gt;
</long>
      </documentation>
      <configuration/>
      <wiring>
        <wire loc="33:/opt/tinyos-2.1.2/tos/platforms/mica/Counter32khz32C.nc">
          <from><interface-ref name="Counter" ref="0x40829928" scoped=""/></from>
          <to><interface-ref name="Counter" ref="0x40844490" scoped=""/></to>
        </wire>
        <wire loc="34:/opt/tinyos-2.1.2/tos/platforms/mica/Counter32khz32C.nc">
          <from><interface-ref name="CounterFrom" ref="0x408436f8" scoped=""/></from>
          <to><interface-ref name="Counter" ref="0x4083e920" scoped=""/></to>
        </wire>
      </wiring>
    </component></referenced></component>